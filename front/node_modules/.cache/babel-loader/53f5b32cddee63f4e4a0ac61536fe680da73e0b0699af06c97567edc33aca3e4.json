{"ast":null,"code":"import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"./reducer\";\nimport thunkMiddleware from \"redux-thunk\";\nconst composeEnhancer = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancer(applyMiddleware(thunkMiddleware)));\nexport default store;\n\n/**\nEste código está creando una tienda (store) de Redux. Aquí se \nimportan algunas funciones y objetos de la biblioteca de Redux: createStore, applyMiddleware y compose.\nLuego, se importa el rootReducer desde un archivo llamado reducer.js que debe contener la lógica principal de la aplicación.\nDespués, se importa thunkMiddleware que es una biblioteca que permite \nescribir acciones asíncronas en Redux.\nLa constante composeEnhancer sirve para utilizar la extensión de \nRedux DevTools en el navegador para depurar y monitorear el estado de la tienda. Si la extensión no está disponible, se utiliza la función compose de Redux para combinar los middleware.\nFinalmente, se crea la tienda llamando a la función createStore de \nRedux, pasando como argumentos el rootReducer y el middleware \nthunkMiddleware combinados con la función composeEnhancer. \nLa tienda es exportada para que pueda ser utilizada en otras \npartes de la aplicación.\n     */","map":{"version":3,"names":["createStore","applyMiddleware","compose","rootReducer","thunkMiddleware","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store"],"sources":["/Users/fedeciappina/Documents/HenryCursada/RM-Again/againrym/IntegradosFBB/R-M-FullStack-/front/src/redux/store.js"],"sourcesContent":["import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"./reducer\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst composeEnhancer = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\n\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancer(applyMiddleware(thunkMiddleware))\n);\n\nexport default store;\n\n/**\nEste código está creando una tienda (store) de Redux. Aquí se \nimportan algunas funciones y objetos de la biblioteca de Redux: createStore, applyMiddleware y compose.\nLuego, se importa el rootReducer desde un archivo llamado reducer.js que debe contener la lógica principal de la aplicación.\nDespués, se importa thunkMiddleware que es una biblioteca que permite \nescribir acciones asíncronas en Redux.\nLa constante composeEnhancer sirve para utilizar la extensión de \nRedux DevTools en el navegador para depurar y monitorear el estado de la tienda. Si la extensión no está disponible, se utiliza la función compose de Redux para combinar los middleware.\nFinalmente, se crea la tienda llamando a la función createStore de \nRedux, pasando como argumentos el rootReducer y el middleware \nthunkMiddleware combinados con la función composeEnhancer. \nLa tienda es exportada para que pueda ser utilizada en otras \npartes de la aplicación.\n     */\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,eAAe,EAAEC,OAAO,QAAQ,OAAO;AAC7D,OAAOC,WAAW,MAAM,WAAW;AACnC,OAAOC,eAAe,MAAM,aAAa;AAEzC,MAAMC,eAAe,GAAI,OAAOC,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACC,oCAAoC,IAAKL,OAAO;AAIjH,MAAMM,KAAK,GAAGR,WAAW,CACvBG,WAAW,EACXE,eAAe,CAACJ,eAAe,CAACG,eAAe,CAAC,CAAC,CAClD;AAED,eAAeI,KAAK;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}